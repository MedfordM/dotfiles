(defvar home_dir "/home/$USER/.config/eww/Scripts")

(defpoll time 
  :interval "15s"
	`date +"%R  %a, %b %d"`
)

(defpoll date 
  :interval "15s"
	`date +""`
)

(defpoll calendar_day 
  :interval "10h"
  :initial 1
  `date "+%d"`
)

(defpoll calendar_month 
  :interval "10h"
  :initial 1
  `date "+%m"`
)

(defpoll calendar_year 
  :interval "10h"
  :initial 2022
  `date "+%Y"`
)

(defvar showSysControl false)

(defpoll gpuTemp
  :interval "2s"
  :initial 0
  `nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader`
)

(defpoll gpuUsage
  :interval "2s"
  :initial 0
  `nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader | tr -d '%'`
)

(defwidget tempComponents []
  (box
    :orientation "v"
    :halign "center"
    :valign "center"
    (box
      :orientation "h"
      :halign "center"
      :valign "center"
      (box
        :orientation "v"
        :halign "center"
        :valign "center"
        :class "tempComponent"
        :style "border-bottom: 1px solid #6c7086; border-right: 1px solid #6c7086; border-top-left-radius: 10px"
        (label
          :class "tempComponentIcon"
          :text "󰍛"
        )
        (box
          :class "tempComponentChild"
          :orientation "h"
          :halign "center"
          :valign "center"
          :space-evenly false
          :spacing 10
          (label
            :class "tempComponentChildIcon"
            :xalign 0
            :text "󰔏"
          )
          (label 
            :class "tempComponentChildLabel"
            :xalign 1
            :text "${EWW_TEMPS['CORETEMP_PACKAGE_ID_0']}°C"
          )
        )
        (box
          :class "tempComponentChild"
          :orientation "h"
          :halign "center"
          :valign "center"
          :space-evenly false
          :spacing 10
          (label
            :class "tempComponentChildIcon"
            :xalign 0
            :text ""
          )
          (label 
            :class "tempComponentChildLabel"
            :xalign 1
            :text "${round(EWW_CPU['avg'],0)} %"
          )
        )
      )
      (box
        :orientation "v"
        :halign "center"
        :valign "center"
        :class "tempComponent"
        :style "border-bottom: 1px solid #6c7086; border-top-right-radius: 10px;"
        (label
          :class "tempComponentIcon"
          :text "󰾲"
        )
        (box
          :class "tempComponentChild"
          :orientation "h"
          :halign "center"
          :valign "center"
          :space-evenly false
          :spacing 10
          (label
            :class "tempComponentChildIcon"
            :xalign 0
            :text "󰔏"
          )
          (label 
            :class "tempComponentChildLabel"
            :xalign 1
            :text "${gpuTemp}°C"
          )
        )
        (box
          :class "tempComponentChild"
          :orientation "h"
          :halign "center"
          :valign "center"
          :space-evenly false
          :spacing 10
          (label
            :class "tempComponentChildIcon"
            :xalign 0
            :text ""
          )
          (label 
            :class "tempComponentChildLabel"
            :xalign 1
            :text "${gpuUsage}%"
          )
        )
      )
    )
    (box
      :orientation "h"
      :halign "center"
      :valign "center"
      (box
        :orientation "v"
        :halign "center"
        :valign "center"
        :class "tempComponent"
        :style "border-right: 1px solid #6c7086; border-bottom-left-radius: 10px;"
        (label
          :class "tempComponentIcon"
          :text ""
        )
        (box
          :class "tempComponentChild"
          :orientation "h"
          :halign "center"
          :valign "center"
          :space-evenly false
          :spacing 10
          (label
            :class "tempComponentChildIcon"
            :xalign 0
            :text ""
          )
          (label 
            :class "tempComponentChildLabel"
            :xalign 1
            :text "${round(EWW_RAM.used_mem / 1024 / 1024 / 1024, 1)}Gb"
          )
        )
        (box
          :class "tempComponentChild"
          :orientation "h"
          :halign "center"
          :valign "center"
          :space-evenly false
          :spacing 10
          (label
            :class "tempComponentChildIcon"
            :xalign 0
            :text ""
          )
          (label 
            :class "tempComponentChildLabel"
            :xalign 1
            :text "${round(EWW_RAM.total_mem / 1024 / 1024 / 1024, 1)}Gb"
          )
        )
      )
      (box
        :orientation "v"
        :halign "center"
        :valign "center"
        :class "tempComponent"
        (label
          :class "tempComponentIcon"
          :text "󰋊"
        )
        (box
          :class "tempComponentChild"
          :orientation "h"
          :halign "center"
          :valign "center"
          :space-evenly false
          :spacing 10
          (label
            :class "tempComponentChildIcon"
            :xalign 0
            :text ""
          )
          (label 
            :class "tempComponentChildLabel"
            :xalign 1
            :text "${round(EWW_DISK["/"].used / 1024 / 1024 / 1024, 1)}Gb"
          )
        )
        (box
          :class "tempComponentChild"
          :orientation "h"
          :halign "center"
          :valign "center"
          :space-evenly false
          :spacing 10
          (label
            :class "tempComponentChildIcon"
            :xalign 0
            :text ""
          )
          (label 
            :class "tempComponentChildLabel"
            :xalign 1
            :text "${round(EWW_DISK["/"].free / 1024 / 1024 / 1024, 1)}Gb"
          )
        )
      )
    )
  )
)

(defwidget temps []
  (box
    :class "sysControlComponent"
    :orientation "v"
    (tempComponents)
  )
)

(defwidget time []
	(box
    :orientation "h"
      (button
        :class "time"
        :onclick {"eww open --toggle sysControl --screen $(i3-msg -t get_workspaces | jq -r '.[] | select(.focused==true) | .output') && eww update activeSource=$(${home_dir}/switchOutput.sh)"}
        time
      )
  )
)

(defpoll volume 
  :interval "300ms" 
  :initial 0
  `pamixer --get-volume`
)

(defvar displayNotifications true)
(defwidget notifications [display]
  (box
    :halign "center"
    :valign "center"
    :orientation "v"
    :class "notifications"
    (label :text "Notifications")
    (box
      :halign "center"
      :valign "center"
      :orientation "h"
      (button
        :class "button"
        :valign "center"
        :onclick "dunstctl set-paused toggle && eww update displayNotifications=${!display}"
        :style { displayNotifications ? "background-color: #585b70": "color: #585b70"}
        (label :text { displayNotifications ? "󰂚" : "󰂛"})
      )
      (button
        :class "button"
        :valign "center"
        :halign "center"
        :onclick "dunstctl history-pop"
        (label :text "󰑙")
      )
    )
  )
)

(defwidget audioVolume []
  (box
    :halign "center"
    :valign "center"
    :orientation "v"
    (box
      :halign "center"
      :valign "center"
      :orientation "h"
      :class "audioVolume"
      :space-evenly false
      (label :text "" :class "volumeLabel")
      (scale
        :class "volumeSlider"
        :min 0
        :max 100
        :value volume
        :onchange "pamixer --set-volume {}"
        :orientation "h"
      )
      (label :text "" :class "volumeLabel")
    )
  )
)

(defvar activeSource "Headphones")
(defvar microphoneEnabled true)
(defwidget audioSource [microphone]
  (box
    :halign "center"
    :valign "center"
    :orientation "v"
    (box
      :halign "center"
      :valign "center"
      :orientation "h"
      (button
        :class "button"
        :valign "center"
        :halign "center"
        :style { microphone ? "background-color: #585b70": "color: #585b70"}
        :onclick "pamixer --source 'alsa_input.usb-Elgato_Systems_Elgato_Wave_XLR_DS42K3A02210-00.mono-fallback' -t && eww update microphoneEnabled=${!microphone}"
        (label :text { microphone ? "󰍬" : "󰍭"})
      )
      (button
        :class "button"
        :valign "center"
        :onclick "Scripts/switchOutput.sh Headphones & eww update activeSource='Headphones'"
        :style { activeSource=="Headphones" ? "background-color: #585b70": "color: #585b70"}
        (label :text "󰋋")
      )
      (button
        :class "button"
        :valign "center"
        :onclick "Scripts/switchOutput.sh Speakers & eww update activeSource='Speakers'"
        :style { activeSource=="Speakers" ? "background-color: #585b70": "color: #585b70"}
        (label :text "󰴸")
      )
    )
  )
)

(deflisten playback :initial "Paused" `playerctl status -F`)
(deflisten loop :initial "Playlist" `playerctl loop -F`)
(deflisten track :initial "" `bash -c 'x=$(playerctl metadata --format "{{playerName}}: {{title}} - {{artist}}"); echo \${x^}'`)
(deflisten shuffle :initial "Off" `playerctl shuffle -F`)

(defwidget playbackControls [playbackStatus loopStatus shuffleStatus]
  (box
    :halign "center"
    :orientation "v"
    :space-evenly false
    (label :text track :class "audioTrack")
    (box
      :halign "center"
      :valign "center"
      :orientation "h"
      (button
        :class "button"
        :valign "center"
        :halign "center"
        :onclick "playerctl shuffle toggle"
        :style { shuffleStatus=="On" ? "background-color: #585b70": "color: #585b70"}
        (label :text "󰒟")
      )
      (button
        :class "button"
        :valign "center"
        :halign "center"
        :onclick "playerctl previous"
        (label :text "󰒮")
      )
      (button
        :class "button"
        :valign "center"
        :halign "center"
        :onclick "playerctl play-pause"
        (label :text {playbackStatus=="Playing" ? "󰏤" : "󰐊"})
      )
      (button
        :class "button"
        :valign "center"
        :halign "center"
        :onclick "playerctl next"
        (label :text "󰒭")
      )
      (button
        :class "button"
        :valign "center"
        :halign "center"
        :onclick { loopStatus=="None" ? "playerctl loop Playlist" : loopStatus=="Playlist" ? "playerctl loop Track" : "playerctl loop None"}
        :style { loopStatus=="None" ? "color: #585b70": "background-color: #585b70"}
        (label :text {loopStatus=="Track" ? "󰑘" : "󰑖"})
      )
    )
  )
)

(defwidget audio []
  (box :orientation "v" :class "audio" :space-evenly false
    (label :text "Audio" :class "label")
    (audioSource :microphone microphoneEnabled)
    (audioVolume)
    (playbackControls :playbackStatus playback :loopStatus loop :shuffleStatus shuffle)
  )
)

(defwidget cal []
	(box :class "sysControlComponent" :orientation "v" 
      (calendar :class "cal"
            :day calendar_day
            :month calendar_month
            :year calendar_year
      )
  )
)

(defwindow sysControl
	:geometry (geometry 
    :y "75px" 
    :anchor "top right"
	)
  (box
    :orientation "v"
    :spacing 35
    :space-evenly false
    :class "main-container"
    (box
      :class "sysControlComponent"
      :orientation "v"
      :space-evenly false
      (notifications
        :display
        displayNotifications
      )
      (audio)
    )
    (temps)
    (cal)
  )
)

(defvar workspaces_1 "󰄯  󰄰  󰄰  󰄰  󰄰")
(defvar workspaces_2 "󰄯  󰄰  󰄰  󰄰  󰄰")
(defvar workspaces_3 "󰄯  󰄰  󰄰  󰄰  󰄰")

(defwindow bar
	:monitor "DP-0"
	:geometry (geometry 
			:anchor "top right"
  )
	:windowtype "dock"
  :wm-ignore "true"
	(box 
    :class "main-container"
    (box 
      :class "workspaces" 
      :valign "center" 
      :halign "end" 
      :spacing 15
      (label :text {workspaces_1} )
      (time)
    )
	)
)

(defwindow bar2
	:monitor "DP-2"
	:geometry (geometry 
    :anchor "top right"
  )
	:windowtype "dock"
  :wm-ignore "true"
	(box
    :class "main-container"
    (box 
      :class "workspaces" 
      :valign "center" 
      :halign "end" 
      :spacing 15
      (label :text {workspaces_2})
    )
  )
)

(defwindow bar3
	:monitor "DP-4"
	:geometry (geometry 
    :anchor "top right"
  )
  :class "bar3"
	:windowtype "dock"
  :wm-ignore "true"
	(box :class "main-container"
    (box 
      :class "workspaces" 
      :valign "center" 
      :halign "end" 
      :spacing 15
      (label :text {workspaces_3})
    )
  )
)
